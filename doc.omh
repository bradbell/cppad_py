-------------------------------------------------------------------------------
          cppad_py: A C++ Object Library and Python Interface to Cppad
           Copyright (C) 2017-20 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
               GNU General Public License version 3.0 or later see
                     https://www.gnu.org/licenses/gpl-3.0.txt
-------------------------------------------------------------------------------
$begin cppad_py$$
$comment -------------------------------------------------------------
default automatic indexing command for all cppad_py documentaiton
$$
$aindex section head subhead$$
$comment -------------------------------------------------------------
Latex macros used throughout Cppad Py documentation
$$
$latex
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }
$$
$comment -------------------------------------------------------------$$
$spell
	https
	bradbell
	usr
	CppAD
	Py
	Linux
	msys
	perl
	Cppad
	Py
	cmake
	Github
	xam
$$

$section cppad_py-2020.5.13:
	A C++ Object Library and Python Interface to CppAD
$$

$head Git Repository$$
$href%https://github.com/bradbell/cppad_py%$$

$head Purpose$$
$list number$$
Provide a connection from Python
to the Algorithmic Differentiation (AD) package Cppad; see $cref py_lib$$.
$lnext
Provide an AD object library; see $cref cpp_lib$$.
$lnext
Provide a concrete example of how
$href%https://github.com/bradbell/cppad_swig%cppad_swig%$$
can be used to connect any scripting language to CppAD.
$lend

$head Getting Started$$
The following is a good place to get started using cppad_py:
$cref/Python/fun_jacobian_xam.py/$$.

$head Numerical Examples$$
The following is a link to some numerical examples: $cref numeric_xam$$.

$head C++ Function Speed$$
One can use Cppad Py to get faster function evaluation in scripting Python,
when the sequence of floating point operations does not depend on the
independent variables.
Once an $cref py_fun$$ is recorded, zero order
$cref/forward mode/py_fun_forward/$$ can be used to
effectively evaluate the function in C++ instead of Python.

$head License$$
This program is distributed under the terms of the
    GNU General Public License version 3.0 or later see
$href%http://www.gnu.org/licenses/gpl-3.0.txt%gpl-3.0.txt%$$.

$childtable%
	setup.py%
	example/python/numeric/numeric.omh%
	lib/library.omh%
	whats_new/2020.omh
%$$


$end
