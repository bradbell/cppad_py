-------------------------------------------------------------------------------
          cppad_py: A C++ Object Library and Python Interface to Cppad
           Copyright (C) 2017-20 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
               GNU General Public License version 3.0 or later see
                     https://www.gnu.org/licenses/gpl-3.0.txt
-------------------------------------------------------------------------------
$begin whats_new_2020$$
$spell
    Py
    omhelp
	erf
	var
	xq
	yq
	inplace
	op
	numpy
	-stdlib=libc++
	cmake
	json
	CppAD
	cppad
	scipy
	seirs
	seird
	xam
	covariate
	covid
$$

$section CppAD Py Changes During 2020$$

$children%
    whats_new/2018.omh
%$$
$head Previous Years$$
$cref whats_new_2018$$

$head 05-08$$
$list number$$
The $code numeric_seirs_fit_xam.py$$ example was renamed
$cref numeric_covid_19_xam.py$$.
And it was change to fit covariate multipliers that model
the infectious rate $latex \beta$$.
$lnext
The $code numeric_seirs_model$$ was renamed $cref numeric_seird_model$$,
the D compartment was added to track total deaths,
the data was changed from Infectious to cumulative death, and
noise was added to the data.
$lnext
In $code numeric_covid_a9_xam$$,
reduce to just E and I as unknowns in initial conditions.
Initial R = D = 0, S = 1 - E - R.
$lnext
Use the observed information matrix to estimate the covariance
of the optimal parameters.
$lend

$head 05-07$$
$list number$$
The function $code scipy.misc.factorial$$
has been deprecated so change it to
$code scipy.special.factorial$$.
$lnext
Add the $code numeric_seirs_model$$ utility example
which allows rates in the ODE to change with time.
This enabled changing the $cref numeric_covid_19_xam.py$$
example to estimate a $latex \beta$$ coefficient that
changes with time.
$lnext
The $code numeric_seirs_class$$ example was removed because
$code numeric_seird_model$$ replaces it with more general
capabilities.
$lend


$head 05-06$$
$list number$$
Add the following utility examples:
$cref numeric_optimize_fun_class$$,
$cref numeric_runge4_one_step$$,
$cref numeric_runge4_multi_step$$,
$code numeric_seirs_class$$.
(The $code numeric_seirs_class$$ was later replaced by
$cref numeric_seird_model$$.)
$lnext
Add mention of using $code DYLD_LIBRARY_PATH$$ in the
$cref/cppad library missing/install_error/CppAD Library Missing/$$
install instructions for the Mac.
$lend

$head 05-05$$
Add the $cref numeric_runge4_one_step_xam.py$$ example.

$head 05-04$$
Add the $cref numeric_optimize_fun_xam.py$$ example.

$head 04-28$$
The $cref/f.from_json()/py_fun_json/from_json/$$ function was added.
In addition, the
$cref/empty function/py_fun_ctor/f/Empty Function/$$ constructor was added.

$head 04-27$$
The $code setup.py$$ program now installs a separate copy of CppAD
and provides instructions at the end for modifying your
$code LD_LIBRARY_PATH$$; see
$cref/cppad library missing/install_error/CppAD Library Missing/$$.

$head 04-26$$
The $code setup.py$$ program was modified to try to automatically solve the
$cref/cppad library missing/install_error/CppAD Library Missing/$$ problem.

$head 04-25$$
The $cref/f.to_json()/py_fun_json/to_json/$$ function was added.


$head 04-24$$
The newer Mac systems seems to require that one use
$code -stdlib=libc++$$ compile and link flag.
The install has been changed to check for and adapt to this condition.
In addition, $cref setup.py$$ now runs the $code cmake$$ command; i.e.,
the user no longer needs to run $code cmake$$ to test the
$cref/c++/setup.py/Test/c++/$$ library.

$head 04-23$$
Add an $cref install_error$$ section to the documentation.

$head 04-22$$
$list number$$
Instructions were added for
$cref/installing using pip/setup.py/Install Using Pip/$$.
$lnext
The binary operators were extended to include $icode x op ay$$ where:
$icode x$$ is a double (python $code float$$),
$icode ay$$ is an $code a_double$$,
and $icode op$$ is
$code +$$,
$code -$$,
$code *$$,
$code /$$, or
$code **$$.
Note that this automatically transfers to numpy arrays; e.g
$icode%x% * %ay%$$ where $icode x$$ is a double and $icode ay$$
is a numpy array of $code a_double$$.
$lend

$head 04-20$$
$list number$$
Move configuration setting from $cref setup.py$$ to
$cref%bin/get_cppad.sh%get_cppad.sh%Settings%$$.
$lnext
First version that installs using $code pip$$.
Install instructions for pip will be added soon.
$lend

$head 04-19$$
$list number$$
Move the python source that gets distributed from $code lib/python$$
to $code lib/python/cppad_py$$ so that more like a standard python package.
$lnext
Drop support for python2. It is not consistent with python3 in
some of the $code setup.py$$ actions.
$lend

$head 04-18$$
$list number$$
Change $icode yq$$ to $icode xq$$, correct documentation,
for $icode xq$$ in the
$cref/c++/cpp_fun_reverse/xq/$$ and $cref/python/py_fun_reverse/xq/$$
reverse mode documentation.
$lnext
Remove the $code --inplace$$ option from the
$cref/syntax/setup.py/Syntax/$$ for building the cppad_py python module.
$lend

$head 04-13$$
$list number$$
The $icode%z% = pow(%x%, %y%)%$$ functions was added; see
$cref a_double_binary$$.
$lnext
Add the $cref/var2par/a_double_property/var2par/$$ function
and improve the notation in the
$cref/near_equal/a_double_property/near_equal/$$ notation.
$lend

$head 04-12$$
$list number$$
Add the $code erf$$ function was added to the
list of $code a_double$$ unary $cref/fun/a_double_unary_fun/fun/$$
that have been implemented.
$lnext
The dynamic parameter argument was missing from the
$cref/syntax/py_independent/Syntax/$$ for the python version
of the $code independent$$ function.  This has been fixed.
$lnext
Improve the $cref/test/setup.py/Test/$$ and $cref/install/setup.py/Install/$$
discussion in $code setup.py$$.
$lend

$head 04-10$$
$list number$$
Change the documentation display on the web using a more recent version of
the documentation program $code omhelp-20200130$$.
$lnext
Add $cref/caching/get_cppad.sh/Caching/$$ to the Cppad install.
$lend

$end
