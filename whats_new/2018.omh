-------------------------------------------------------------------------------
          cppad_py: A C++ Object Library and Python Interface to Cppad
           Copyright (C) 2017-20 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
               GNU General Public License version 3.0 or later see
                     https://www.gnu.org/licenses/gpl-3.0.txt
-------------------------------------------------------------------------------
$begin whats_new_2018$$
$spell
    Cppad
    Py
    std::runtime_error
    cmake
    init
    numpy
    ind
    dep
    af
    xam
    cxx
$$

$section Cppad Py Changes During 2018$$

$head 11-10$$
$list number$$
Added the $cref/dynamic/py_independent/dynamic/$$
argument to the $code independent$$ function and the
$cref/f.new_dynamic/py_fun_new_dynamic/$$ function.
$lnext
Added the sections $cref more_cpp$$ and $cref more_py$$.
$lend

$head 11-09$$
Include binary operations where first operand is an $code a_double$$
and second operand is a $code double$$; see
$cref a_double_binary$$,
$cref a_double_compare$$, and
$cref a_double_assign$$.


$head 11-07$$
$list number$$
Advance to cppad-20181106 (must re-run $code bin/get_cppad.sh$$).
$lnext
The $cref/a_fun/py_fun_ctor/Syntax/a_fun/$$ objects were added.
This support all the operations that
$cref/d_fun/py_fun_ctor/Syntax/d_fun/$$ support all the
$cref py_fun$$ operations with the exception of
$cref/optimize/py_fun_optimize/$$.
The $cref py_sparse$$ operations are not yet supported.
$lend

$head 11-05$$
$list number$$
$bold API Change$$:
change $code cppad_py.a_fun$$ to $code cppad_py.d_fun$$
because it is a function that evaluates in $code double$$
and plan to use $code cppad_py.a_fun$$ for a function that
evaluates in $code a_double$$.
$lnext
Advance to cppad-20181105 (must re-run $code bin/get_cppad.sh$$).
$lend

$head 08-13$$
$list number$$
Change $code cppad_cxx_flags$$ to
$cref/extra_cxx_flags/get_cppad.sh/Settings/extra_cxx_flags/$$ in the user
configuration settings.
Also remove $code swig_cxx_flags$$ from these user settings
(set automatically).
$lnext
Improve the install instructions; see $cref setup.py$$.
$lend

$head 07-31$$
$list number$$
The general purpose Swig example $code swig_xam$$,
which was not specific to cppad_py,
has been removed.
$lnext
A change to $code setup.py$$ was making the
$cref get_cppad.sh$$ script fail.
This has been fixed.
$lnext
The python tests are no run in $code example/python$$
(not copied to the build directory).
$lend

$head 07-26$$
Change $code cppad_py/python_major_version$$
to $code cppad_py/python_version$$
because it now contains both major and minor version numbers.

$head 07-19$$
Add $code -std=c++11$$ to the default compile flags in
$cref setup.py$$.
Add $code -py3$$ to the $code swig$$ builds
when running $code setup.py$$ using Python 3; see
$href%http://www.swig.org/Doc1.3/Python.html#Python_python3support
    %swig python 3
%$$.

$head 07-15$$
$list number$$
Better error reporting for type and size errors in
$code numpy.array$$ arguments to $code cppad_py$$ functions using
$cref numpy2vec$$.
$lnext
Finish converting all vectors and matrices in
$cref py_lib$$ to numpy arrays.
Note the $cref py_utility$$ routines do the conversion.
$lend

$head 07-14$$
$list number$$
Continue conversion of python library to using $code numpy.array$$; see
$cref py_fun_forward$$, $cref py_fun_reverse$$.
$lnext
Add the $cref/f.size_order()/py_fun_property/size_order/$$ function.
$lend

$head 07-13$$
Continue conversion of python library to using $code numpy.array$$; see
$cref py_fun_jacobian$$, $cref py_fun_hessian$$.

$head 07-12$$
$list number$$
Continue conversion of python library to using $code numpy.array$$; see
$cref py_independent$$, $cref py_fun_ctor$$.
$lnext
Add the file $code cppad_py/python_major_version$$ which contains
the major version of python that this build of $code cppad_py$$ is for.
$lnext
Automatically use $cref/build_type/get_cppad.sh/Settings/build_type/$$
control how setup.py compiles C++
(one used to use flags on setup.py command line).
$lnext
setup.py was using the git repository version of Cppad instead of the
one installed in $code build/prefix$$ by $cref get_cppad.sh$$.
This has been fixed.
$lnext
Change $code size_ind$$ to $cref/size_domain/py_fun_property/size_domain/$$
and $code size_dep$$ to $cref/size_range/py_fun_property/size_range/$$.
$lend

$head 07-10$$
Start conversion of python library from using
$code vector$$ to using $code numpy.array$$; see
$cref py_independent$$.

$head 07-08$$
$list number$$
Advanced to $code cppad-20180703$$.
$lnext
Fix the following warning:
$code catching polymorphic type class 'std::runtime_error' by value$$.
$lnext
Suppress the following warning when running $cref setup.py$$:
$code clearing an object of non-trivial type class 'cppad_py::a_double'$$;
see $href%https://github.com/swig/swig/issues/1259%swig issue 1259%$$.
$lnext
Move all settings to $cref setup.py$$ and run $code cmake$$ from there.
$lnext
The file $code cppad_py/__init__.py$$ was not being created.
This has been fixed.
$lend

$head 07-07$$
Change build of Python module to use Python 3
(now it can use either 2 or 3).

$head 07-03$$
Birthday when Cppad Py was first extracted from Cppad Swig.

$end
