# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: Bradley M. Bell <bradbell@seanet.com>
# SPDX-FileContributor: 2017-23 Bradley M. Bell
# ----------------------------------------------------------------------------
{xrst_begin vector_ctor}
{xrst_spell
   av
   bool
   bv
   dv
   iv
}


CppAD Py Vector Constructors
############################

Syntax
******

C++
===
| ``cppad_py::vec_bool``     *bv* ( *n* )
| ``cppad_py::vec_int``      *iv* ( *n* )
| ``cppad_py::vec_double``   *dv* ( *n* )
| ``cppad_py::vec_a_double`` *av* ( *n* )

Python
======
| *bv* =  ``cppad_py.vec_bool`` ( *n* )
| *iv* =  ``cppad_py.vec_int`` ( *n* )
| *dv* =  ``cppad_py.vec_double`` ( *n* )
| *av* =  ``cppad_py.vec_a_double`` ( *n* )

Purpose
*******
Creates a vector with *n* elements.

n
*
The argument *n* is a non-negative integer with default value zero;
i.e., if it is not present, zero is used.
(It has c++ prototype ``size_t`` *n* .)

vec_bool
********
This result *bv* is a vector with elements of type ``bool``

vec_int
*******
This result *bv* is a vector with elements of type ``int``

vec_double
**********
This result *bv* is a vector with elements of type ``double``

vec_a_double
************
This result ``av`` is a vector with elements of type
:ref:`a_double-name`.

Example
*******
All of the other vector examples use the vector constructors.

{xrst_end vector_ctor}
-------------------------------------------------------------------------------
{xrst_begin vector_size}
{xrst_spell
   bool
}


Size of a Vector
################

Syntax
******
*n* = *v*\ ``.size`` ()

v
*
The object *v* has one of the following prototypes:

| |tab| ``const vec_bool&`` *v*
| |tab| ``const vec_int&`` *v*
| |tab| ``const vec_double&`` *v*
| |tab| ``const vec_a_double&`` *v*

n
*
The result has c++ prototype

| |tab| ``size_t`` *n*

i.e., it is a positive integer.
Its value is the number of elements in the vector *v* .

{xrst_toc_hidden
   example/cplusplus/vector_size_xam.cpp
   example/python/core/vector_size_xam.py
}
Example
*******
:ref:`c++<vector_size_xam.cpp-name>`,
:ref:`python<vector_size_xam.py-name>`.

{xrst_end vector_size}
-------------------------------------------------------------------------------
{xrst_begin vector_set_get}
{xrst_spell
   bool
}


Setting and Getting Vector Elements
###################################

Syntax
******

| *u* [ *i* ] = *x*
| *y* = *v* [ *i* ]

element_type
************
We use *element_type* to denote the type of elements in the
vector. It must be one of the following types:
``bool`` , ``int`` , ``double`` , ``a_double`` .

i
*
This argument has c++ prototype

| |tab| ``size_t`` *i*

It must be between zero and the size of the vector minus one.

u
*
The object *u* has c++ prototype

| |tab| ``vec_``\ *element_type*\ ``&`` *u*

x
*
The argument *x* has c++ prototype

| |tab| ``const`` *element_type*\ ``&`` *x*

v
*
The object *v* has c++ prototype

| |tab| ``const vec_``\ *element_type*\ ``&`` *v*

y
*
The result *y* has c++ prototype

| |tab| *element_type* *y*

{xrst_toc_hidden
   example/cplusplus/vector_set_get_xam.cpp
   example/python/core/vector_set_get_xam.py
}
Example
*******
:ref:`c++<vector_set_get_xam.cpp-name>`,
:ref:`python<vector_set_get_xam.py-name>`.

{xrst_end vector_set_get}
