-------------------------------------------------------------------------------
          cppad_py: A C++ Object Library and Python Interface to Cppad
           Copyright (C) 2017-20 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
               GNU General Public License version 3.0 or later see
                     https://www.gnu.org/licenses/gpl-3.0.txt
-------------------------------------------------------------------------------
$begin more_cpp$$
$dollar @$$
$spell
	CppAD
	cppad_py
	hpp
	cplusplus
	OMhelp
	xam
	bool
	grep
$$

$section Steps To Add More C++ Functions$$

$head Purpose$$
This section outlines the steps for adding more CppAD functionality
to cppad_py.
This is done by example showing how the $cref cpp_fun_new_dynamic$$ was added.
This example case was chosen because it required both changing one
C++ function, $cref cpp_independent$$,
and adding a new C++ function, $cref cpp_fun_new_dynamic$$.

$head Include File$$

$subhead independent$$
The include file $code include/cppad/py/fun.hpp$$
was edited to add the following prototype:
$srccode%cpp%
	CPPAD_PY_LIB_PUBLIC
	std::vector<a_double> independent(
		const std::vector<double>& x, const std::vector<double>& dynamic
	);
%$$
The $code independent$$ function is not part of the
$code d_fun$$ or $code a_fun$$ class, but
calling it is the first step in creating these objects.
This is why its prototype is in the $code fun.hpp$$ file.

$subhead new_dynamic$$
The include file $code include/cppad/py/fun.hpp$$
was edited to add the following member function to $code d_fun$$:
$srccode%cpp%
    void new_dynamic(const std::vector<double>& dynamic);
%$$
The following member function was added to $code a_fun$$:
$srccode%cpp%
    void new_dynamic(const std::vector<a_double>& adynamic);
%$$


$head Documentation$$

$subhead independent$$
The C++ file $code lib/cplusplus/fun.cpp$$
was edited to add the following syntax documentation:
$codei%
	%a_both% = cppad_py::independent(%x%, %dynamic%)
%$$
and the corresponding return value was documented; see
$cref/a_both/cpp_independent/a_both/$$.

$subhead new_dynamic$$
The $cref cpp_fun_new_dynamic$$ documentation was added.

$subhead Example$$
The corresponding example file was added to the documentation,
below the $cref cpp_independent$$ section, using the OMhelp commands:
$codep
	@children%
		example/cplusplus/fun_dynamic_xam.cpp
	%@@
$$
In addition, a reference to this example was added under the
$cref/example/cpp_independent/Example/$$ heading in the $code independent$$
documentation.

$head Implementation$$

$subhead independent$$
The following function was added to the $code lib/cplusplus/fun.cpp$$ file:
$srcfile%lib/cplusplus/fun.cpp%
	0%// BEGIN_A_BOTH_INDEPENDENT_SOURCE%// END_A_BOTH_INDEPENDENT_SOURCE%0
%$$

$subhead new_dynamic$$
The following function
was added to the $code lib/cplusplus/fun.cpp$$ file:
$srcfile%lib/cplusplus/fun.cpp%
	0%// BEGIN_NEW_DYNAMIC_SOURCE%// END_NEW_DYNAMIC_SOURCE%0
%$$
A similar function was added to the $code a_fun$$ class.

$head Example$$
The file $code example/cplusplus/fun_dynamic_xam.cpp$$ was added
with the following contents:
$cref fun_dynamic_xam.cpp$$.
In addition, in the file $code example/cplusplus/check_all.cpp$$:
$codei%
	extern bool fun_optimize_xam(void);
%$$
was added to the external declarations and
$codei%
	ok &= Run( fun_optimize_xam,          "fun_optimize_xam"        );
%$$
was added to the main program.

$head Testing$$
You must do a git add for all of the new files before running
$code bin/check_all.sh$$.
After all the C++ changes above were implemented,
$code bin/check_all.sh$$ was run and the changes were made
until the warnings and errors were fixed.
The command
$codep
	grep 'fun_dynamic_xam' check_all.log
$$
was used to make sure that the new C++ example / test was run.
Note that if a particular step in $code bin/check_all.sh$$ is failing,
you can just re-run that step to see if a particular fix works.
Once the C++ tests were working, the changes where checked into using
$code git$$.

$end
