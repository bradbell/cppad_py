-------------------------------------------------------------------------------
          cppad_py: A C++ Object Library and Python Interface to Cppad
           Copyright (C) 2017-20 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
               GNU General Public License version 3.0 or later see
                     https://www.gnu.org/licenses/gpl-3.0.txt
-------------------------------------------------------------------------------
$begin vector_ctor$$
$spell
    vec
    Cppad
    Py
    av
    py
    bv
    bool
    dv
$$

$section Cppad Py Vector Constructors$$

$head Syntax$$
$icode%bv% = cppad_py.vec_bool(%n%)
%$$
$icode%iv% = cppad_py.vec_int(%n%)
%$$
$icode%dv% = cppad_py.vec_double(%n%)
%$$
$icode%av% = cppad_py.vec_a_double(%n%)
%$$

$head Purpose$$
Creates a vector with $icode n$$ elements.

$head n$$
The argument $icode n$$ is a non-negative integer with default value zero;
i.e., if it is not present, zero is used.

$head vec_bool$$
This result $icode bv$$ is a vector with elements of type $code bool$$

$head vec_int$$
This result $icode bv$$ is a vector with elements of type $code int$$

$head vec_double$$
This result $icode bv$$ is a vector with elements of type $code double$$

$head vec_a_double$$
This result $code av$$ is a vector with elements of type $cref a_double$$.

$head Example$$
All of the other vector examples use the vector constructors.

$end
-------------------------------------------------------------------------------
$begin vector_size$$
$spell
    vec
    Cppad
    Py
    const
    bool
$$

$section Size of a Vector$$

$head Syntax$$
$icode%n% = %v%.size()%$$

$head v$$
The object $icode v$$ has one of the following prototypes:
$codei%
    const vec_bool&      %v%
    const vec_int&       %v%
    const vec_double&    %v%
    const vec_a_double&  %v%
%$$

$head n$$
The result has prototype
$codei%
    size_t %n%
%$$
i.e., it is a positive integer.
Its value is the number of elements in the vector $icode v$$.

$children%
    example/cplusplus/vector_size_xam.cpp%
    example/python/core/vector_size_xam.py
%$$
$head Example$$
$cref/C++/vector_size_xam.cpp/$$,
$cref/Python/vector_size_xam.py/$$.

$end
-------------------------------------------------------------------------------
$begin vector_set_get$$
$spell
    vec
    Cppad
    Py
    const
    bool
$$

$section Setting and Getting Vector Elements$$

$head Syntax$$
$icode%u%[%i%] = %x%
%$$
$icode%y% = %v%[%i%]
%$$

$head element_type$$
We use $icode element_type$$ to denote the type of elements in the
vector. It must be one of the following types:
$code bool$$, $code int$$, $code double$$, $code a_double$$.

$head i$$
This argument has prototype
$codei%
    size_t %i%
%$$
It must be between zero and the size of the vector minus one.

$head u$$
The object $icode u$$ has prototype
$codei%
    vec_%element_type%&   %u%
%$$

$head x$$
The argument $icode x$$ has prototype
$codei%
    const %element_type%& %x%
%$$

$head v$$
The object $icode v$$ has the following prototype
$codei%
    const vec_%element_type%& %v%
%$$

$head y$$
The result $icode y$$ has prototype
$codei%
    %element_type% %y%
%$$

$children%
    example/cplusplus/vector_set_get_xam.cpp%
    example/python/core/vector_set_get_xam.py
%$$
$head Example$$
$cref/C++/vector_set_get_xam.cpp/$$,
$cref/Python/vector_set_get_xam.py/$$.

$end
