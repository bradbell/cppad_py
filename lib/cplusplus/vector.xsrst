-------------------------------------------------------------------------------
          cppad_py: A C++ Object Library and Python Interface to Cppad
           Copyright (C) 2017-20 Bradley M. Bell (bradbell@seanet.com)
               This program is distributed under the terms of the
               GNU General Public License version 3.0 or later see
                     https://www.gnu.org/licenses/gpl-3.0.txt
-------------------------------------------------------------------------------
{xsrst_begin vector_ctor}

.. include:: ../preamble.rst

{xsrst_spell
    cppad
    av
    bv
    bool
    dv
}

Cppad Py Vector Constructors
############################

Syntax
******

| *bv* =  ``cppad_py.vec_bool`` ( *n* )
| *iv* =  ``cppad_py.vec_int`` ( *n* )
| *dv* =  ``cppad_py.vec_double`` ( *n* )
| *av* =  ``cppad_py.vec_a_double`` ( *n* )

Purpose
*******
Creates a vector with *n* elements.

n
*
The argument *n* is a non-negative integer with default value zero;
i.e., if it is not present, zero is used.

vec_bool
********
This result *bv* is a vector with elements of type ``bool``

vec_int
*******
This result *bv* is a vector with elements of type ``int``

vec_double
**********
This result *bv* is a vector with elements of type ``double``

vec_a_double
************
This result ``av`` is a vector with elements of type :ref:`a_double<a_double>`.

Example
*******
All of the other vector examples use the vector constructors.

{xsrst_end vector_ctor}
-------------------------------------------------------------------------------
{xsrst_begin vector_size}

.. include:: ../preamble.rst

{xsrst_spell
    bool
}

Size of a Vector
################

Syntax
******
*n* = *v* . ``size`` ()

v
*
The object *v* has one of the following prototypes:

| |tab| ``const vec_bool&`` *v*
| |tab| ``const vec_int&`` *v*
| |tab| ``const vec_double&`` *v*
| |tab| ``const vec_a_double&`` *v*

n
*
The result has prototype

| |tab| ``size_t`` *n*

i.e., it is a positive integer.
Its value is the number of elements in the vector *v* .

{xsrst_children
    example/cplusplus/vector_size_xam.cpp
    example/python/core/vector_size_xam.py
}
Example
*******
:ref:`c++<vector_size_xam_cpp>`,
:ref:`python<vector_size_xam_py>`.

{xsrst_end vector_size}
-------------------------------------------------------------------------------
{xsrst_begin vector_set_get}

.. include:: ../preamble.rst

{xsrst_spell
    bool
}

Setting and Getting Vector Elements
###################################

Syntax
******

| *u* [ *i* ] = *x*
| *y* = *v* [ *i* ]

element_type
************
We use *element_type* to denote the type of elements in the
vector. It must be one of the following types:
``bool`` , ``int`` , ``double`` , ``a_double`` .

i
*
This argument has prototype

| |tab| ``size_t`` *i*

It must be between zero and the size of the vector minus one.

u
*
The object *u* has prototype

| |tab| ``vec_`` *element_type* ``&`` *u*

x
*
The argument *x* has prototype

| |tab| ``const`` *element_type* ``&`` *x*

v
*
The object *v* has the following prototype

| |tab| ``const vec_`` *element_type* ``&`` *v*

y
*
The result *y* has prototype

| |tab| *element_type* *y*

{xsrst_children
    example/cplusplus/vector_set_get_xam.cpp
    example/python/core/vector_set_get_xam.py
}
Example
*******
:ref:`c++<vector_set_get_xam_cpp>`,
:ref:`python<vector_set_get_xam_py>`.

{xsrst_end vector_set_get}
