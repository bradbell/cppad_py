# -----------------------------------------------------------------------------
#         cppad_py: A C++ Object Library and Python Interface to Cppad
#          Copyright (C) 2017-20 Bradley M. Bell (bradbell@seanet.com)
#              This program is distributed under the terms of the
#              GNU General Public License version 3.0 or later see
#                    https://www.gnu.org/licenses/gpl-3.0.txt
# -----------------------------------------------------------------------------
import sys
import os
top_srcdir = '@CMAKE_SOURCE_DIR@'
cur_srcdir = '@CMAKE_CURRENT_SOURCE_DIR@'
sys.path.insert(0, top_srcdir)
sys.path.insert(0, '.')
error_count = 0
# -----------------------------------------------------------------------------
def run_test(module_name, fun_name) :
    namespace = {} # not needed in Python 2
    exec( 'import ' + module_name,                         namespace )
    exec( 'ok = '   + module_name + '.' + fun_name + '()', namespace )
    ok = namespace['ok']
    if ok :
        print('python: ' + name + ': OK')
    else :
        print('python: ' + name + ': Error')
    return ok
# -----------------------------------------------------------------------------
os.chdir(top_srcdir + '/test/mixed')
if '@include_mixed@' == 'true' :
    test_list = [
        'hes_fixed_obj',
    ]
    for name in test_list :
        ok = run_test(name, name)
        if not ok :
            error_count += 1
os.chdir(cur_srcdir)
# -----------------------------------------------------------------------------
if '@include_mixed@' == 'true' :
    mixed_list = [
        'ctor_xam',
        'fatal_error_xam',
        'fix_constraint_xam',
        'fix_likelihood_xam',
        'hes_fixed_obj_xam',
        'hes_random_obj_xam',
        'optimize_fixed_1',
        "optimize_fixed_2",
        "optimize_random_xam",
        'ran_likelihood_xam',
        'warning_xam',
    ]
    os.chdir('mixed')
    for name in mixed_list :
        ok = run_test(name, name)
        if not ok :
            error_count += 1
    os.chdir('..')
# -----------------------------------------------------------------------------
core_list = [
    'a_double_cond_assign_xam',
    'a_double_property_xam',
    'a_double_unary_fun_xam',
    'a_double_unary_op_xam',
    'a_double_assign_xam',
    'a_double_binary_xam',
    'a_double_compare_xam',
    'a_fun_xam',
    'vector_size_xam',
    'vector_set_get_xam',
    'fun_dynamic_xam',
    'fun_property_xam',
    'fun_check_for_nan_xam',
    'fun_optimize_xam',
    'fun_jacobian_xam',
    'fun_hessian_xam',
    'fun_forward_xam',
    'fun_reverse_xam',
    'fun_abort_xam',
    'fun_json_xam',
    'sparse_rc_xam',
    'sparse_rcv_xam',
    'sparse_jac_pattern_xam',
    'sparse_jac_xam',
    'sparse_hes_xam',
    'sparse_hes_pattern_xam',
    'exception_xam',
]
os.chdir('core')
for name in core_list :
    ok = run_test(name, name)
    if not ok :
        error_count += 1
os.chdir('..')
# -----------------------------------------------------------------------------
numeric_list = [
    'simple_inv_xam',
    'optimize_fun_xam',
    'runge4_step_xam',
    'rosen3_step_xam',
    'ode_multi_step_xam',
    'seirwd_model_xam',
    # 'covid_19_xam', is left out because it is slow and uses matplotlib
]
os.chdir('numeric')
for name in numeric_list :
    ok = run_test(name, name)
    if not ok :
        error_count += 1
os.chdir('..')
# -----------------------------------------------------------------------------
if error_count > 0 :
    print('python: check_all: error_count = ', error_count)
    sys.exit(1)
print('python: check_all: OK')
sys.exit(0)
