lines 176-254 of file: lib/cplusplus/fun.cpp

{xrst_begin cpp_fun_ctor}
{xrst_spell
   af
   cppad
}


Stop Current Recording and Store Function Object
################################################

Syntax
******

d_fun
=====

| *f* =  ``cppad_py::d_fun`` ( *ax* , *ay* )

a_fun
=====

| *af* =  ``cppad_py::a_fun`` ( *f* )

ax
**
This argument has prototype

| |tab| ``const vec_a_double&`` *ax*

and must be the same as
:ref:`ax<cpp_independent@ax>`
returned by the previous call to ``independent`` ; i.e.,
it must be the independent variable vector.
We use the notation *n* = *ax*\ ``.size`` ()
to denote the number of independent variables.

ay
**
This argument has prototype

| |tab| ``const vec_a_double&`` *ax*

It specifies the dependent variables.
We use the notation *m* = *ay*\ ``.size`` ()
to denote the number of dependent variables.

f
*
This result has prototype

| |tab| ``cppad_py::d_fun`` *f*

It has a representation for the floating point operations
that mapped the independent variables *ax*
to the dependent variables *ay* .
This object computes function and derivative values using ``double`` .

Empty Function
==============
In the case where *ax* and *ay* have size zero,
the function is 'empty' and all its sizes are zero; see
:ref:`cpp_fun_property-name`.

af
**
This result has prototype

| |tab| ``cppad_py::a_fun`` *af*

It has a representation of the same function as *f* .
This object computes function and derivative values using ``a_double`` .
Initially, there are not Taylor coefficient stored in *af* ; i.e.,
:ref:`af_size_order()<cpp_fun_property@size_order>` is zero.

Example
*******
All of the examples use these constructors.

{xrst_end cpp_fun_ctor}
